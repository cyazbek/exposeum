using System;
using Exposeum.Views;
using Exposeum.Models;

using System.Collections.Generic;
using System.Linq;

namespace Exposeum.Controllers
{
	public class MapController : IBeaconFinderObserver
	{
		private MapView _view;
		private Map _model;
		private BeaconFinder _beaconFinder = BeaconFinder.getInstance();

		public MapController(MapView view){
			_view = view;

			_model = new Map ();

			_beaconFinder.addObserver (this);

			_beaconFinder.setStoryLine(_model.CurrentStoryline);
			_beaconFinder.findBeacons();
		}

		public void FloorChanged(int newFloorIndex){
			_model.SetCurrentFloor(newFloorIndex);
			_view.Update ();
		}

		public void beaconFinderObserverUpdate (IBeaconFinderObservable observable)
		{
			BeaconFinder beaconFinder = (BeaconFinder)observable;
			EstimoteSdk.Beacon beacon = beaconFinder.getClosestBeacon();

            if (beacon != null && (_model.CurrentStoryline.hasBeacon(beacon)))
			{
			    PointOfInterest poi = _model.CurrentStoryline.findPOI(beacon);

<<<<<<< HEAD
			    if (!poi.visited && poi.floor.Equals(_model.CurrentFloor))
			    {
                    // for TESTS:
			        ExposeumApplication.IsExplorerMode = false;
			        //don't display a popup if the beacon has already been visited or if the poi is not on app's current floor
			        if (!ExposeumApplication.IsExplorerMode)
			        {
			            try
			            {
			                _model.CurrentStoryline.updateProgress(poi);
                            displayPopUp(poi);
                        }
                        catch (PointOfInterestNotVisitedException e)
			            {
			                DisplayOutOfOrderPointOfInterestPopup(poi);
			            }
                    }
                    else
                    {
                        poi.SetTouched();
                        displayPopUp(poi);
                    }
			    }
=======
				if(!poi.Visited && poi.floor.Equals(_model.CurrentFloor)) { //don't display a popup if the beacon has already been visited or if the poi is not on app's current floor
					poi.SetVisited();
					displayPopUp(poi);
					_model.CurrentStoryline.addVisitedPoiToList(poi);
				}
>>>>>>> 82c84b0bda410ee783933593e78903c2b79e8d4a

			}

			_view.Update ();
		}

        /// <summary>
        /// Method to display informational toast to Visitors when out of sequence POI visited in storyline
        /// </summary>
	    private void DisplayOutOfOrderPointOfInterestPopup(PointOfInterest poi)
	    {
            _view.InitiateOutOfOrderPointOfInterestPopup(poi);
	    }

	    public void displayPopUp(PointOfInterest selectedPOI)
        {	
			_view.InitiatePointOfInterestPopup (selectedPOI);
			_view.Update (); //technically unncecessary but included for completeness
		}

		public Map Model
		{
			get { return this._model; }
		}
	}
}
